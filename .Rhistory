df_temp <- c(inc_list, price_list, psi_sims)
# choose number of people to simulate (set to nobs for all)
nobs_sims <- nobs
df_subset <- lapply(df_temp, "[", c(1:nobs_sims))
# To try and get expose as part of package
#options(rccp.cpp.dir="cache")
#model_src <- stanc_builder("src/stan_files/SimulationFunctions.stan")
#expose_stan_functions(model_src, cacheDir = "cache")
wtpcppcode <- stanc("src/stan_files/SimulationFunctions.stan",
model_name = "SimulationFunctions")
start_time <- Sys.time()
expose_stan_functions(wtpcppcode)
quant <- pmap(df_subset, Calcmdemand_rng,
gamma_sim=gamma,
alpha_sim=alpha,
scale_sim=scale,
ngoods=ngoods, nerrs=nerrs, nsims=nsims,
algo_gen = algo_gen)
end_time <- Sys.time()
end_time - start_time
# MDCEV Model with fixed parameters estimated using MLE or Stan
# Notes:
# Includes LES, Gamma, and Alpha specifications as options
# One set of psi parameters for individual and alternative-specific variables and interactions
# Load Packages ------------------------------------#
rm(list=ls(all=TRUE))
ls()
library(pacman)
p_load(tidyverse, R.matlab, reshape2, rstan, rmdcev)
source("r/helperFunctions.R")
#---------------------------------------------------------------------------------------
# user input
nobs <- 1000 # number of individuals
inc <- 100000 + runif(nobs, 0, 50000) # budget
ngoods <- 10 # number of goods
price <- 5 + matrix(runif(nobs*ngoods, 0, 100), nobs, ngoods)  # price of non-numeraire good
price_num <- 1
nerrs <- 1
weight <- 1 #Modify if weights are used
nsims <- 1
algo_gen <- 0
model_specification <- "gamma"
beta <- c(-7, 0.5, 2, -1.5, 3, -2, 1, 2)
gamma <- 1 + runif(ngoods, 0, 2)
scale <- 1
fixed_scale <- 0
#---------------------------------------------------------------------------------------
if (model_specification == "alpha"){
model_type <- 1
alpha <- c(0.8, rep(0, ngoods))
parms_true <- c(beta, gamma, alpha[1], scale)
} else if (model_specification == "alpha"){
model_type <- 2
alpha <- 0 + runif(ngoods+1, 0.01, .98)
gamma <- rep(1, ngoods)
parms_true <- c(beta, alpha, scale)
} else if (model_specification == "gamma"){
model_type <- 3
alpha <- rep(0.5, ngoods+1)
parms_true <- c(beta, gamma, alpha[1], scale)
} else if (model_specification == "gamma0"){
model_type <- 4
alpha <- rep(0, ngoods+1)
parms_true <- c(beta, gamma, scale)
} else
stop("No model specificied. Choose a model_specification")
parms_true <- tbl_df(parms_true) %>%
rename(parms_true = value)
# Create psi variables that vary over alternatives
b1 <- rep(1,ngoods)
b2 <- rbinom(ngoods, 1, 0.5)
b3 <- rbinom(ngoods, 1, 0.5)
psi_j_temp <- list(b1 = b1,
b2 = b2,
b3 = b3)
# Create psi variables that vary by person
psi_socio = 2*matrix(runif(nobs * (length(beta)-3)), nobs,length(beta)-3)
psi_i_temp <- list(b4 = psi_socio[,1],
b5 = psi_socio[,2],
b5 = psi_socio[,3],
b5 = psi_socio[,4],
b5 = psi_socio[,5])
# Create full set of base psi variables
psi_j_temp <- map(psi_j_temp, function(x) {rep(x, each=nobs)})
psi_i_temp <- map(psi_i_temp, function(x) {rep(x, times= ngoods)})
dat_psi = c(psi_j_temp, psi_i_temp)
dat_psi = matrix(unlist(dat_psi), ncol = length(beta))
psi_sims <- matrix(dat_psi %*% beta, ncol = ngoods, byrow = TRUE)
psi_sims <- CreateListsRow(psi_sims)
psi_sims <- list(psi_sims )
names(psi_sims) <- "psi_sims"
inc_list <- list(as.list(inc))
names(inc_list) <- "inc" # price normalized MU at zero
price_list <- cbind(1, price) #add numeraire price to price matrix (<-1)
price_list <- list(CreateListsRow(price_list))
names(price_list) <- "price" # price normalized MU at zero
###########################################################################
# Pull individual level data into one list
###########################################################################
df_temp <- c(inc_list, price_list, psi_sims)
# choose number of people to simulate (set to nobs for all)
nobs_sims <- nobs
df_subset <- lapply(df_temp, "[", c(1:nobs_sims))
# To try and get expose as part of package
#options(rccp.cpp.dir="cache")
#model_src <- stanc_builder("src/stan_files/SimulationFunctions.stan")
#expose_stan_functions(model_src, cacheDir = "cache")
wtpcppcode <- stanc("src/stan_files/SimulationFunctions.stan",
model_name = "SimulationFunctions")
start_time <- Sys.time()
expose_stan_functions(wtpcppcode)
quant <- pmap(df_subset, Calcmdemand_rng,
gamma_sim=gamma,
alpha_sim=alpha,
scale_sim=scale,
ngoods=ngoods, nerrs=nerrs, nsims=nsims,
algo_gen = algo_gen)
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
quant_list <- list(quant)
names(quant_list) <- "quant" # price normalized MU at zero
df_temp <- c(inc_list, quant_list, price_list, psi_sims)
df_subset <- lapply(df_temp, "[", c(1:nobs_sims))
quant_test <- pmap(df_subset, CalcmdemandTest_rng,
gamma_sim=gamma,
alpha_sim=alpha,
scale_sim=scale,
ngoods=ngoods, nerrs=nerrs, nsims=nsims,
cond_error = 0,
algo_gen = algo_gen)
end_time <- Sys.time()
end_time - start_time
test <- matrix(unlist(quant), nrow = nobs, byrow = TRUE) - matrix(unlist(quant_test), nrow = nobs, byrow = TRUE)
sum(test)
# Hicksian test
psi_p_sims <- psi_sims
names(psi_p_sims) <- "psi_p_sims" # price normalized MU at zero
price_list <- cbind(1, price) #add numeraire price to price matrix (<-1)
price_list <- list(CreateListsRow(price_list))
names(price_list) <- "price" # price normalized MU at zero
price_p <- c(0,rep(10,ngoods))
quant_list <- list(map(quant, function(x){x[,2:(ngoods+1)]}))
names(quant_list) <- "quant_j" # price normalized MU at zero
df_temp <- c(inc_list, quant_list, price_list, psi_sims, psi_p_sims)
df_subset <- lapply(df_temp, "[", c(1:nobs_sims))
hquant_test <- pmap(df_subset, CalchdemandTest_rng,
gamma_sim=gamma,
alpha_sim=alpha,
price_p = price_p,
scale_sim=scale,
ngoods=ngoods, nerrs=nerrs, nsims=nsims,npols = 1,
cond_error = 1,
algo_gen = algo_gen,
model_type = model_type)
end_time <- Sys.time()
end_time - start_time
# Convert simulated data into estimation data
quant <- matrix(unlist(quant), nrow = nobs, byrow = TRUE)
quant_test <- matrix(unlist(quant_test), nrow = nobs, byrow = TRUE)
dat_psi_list <- lapply(seq_len(ncol(dat_psi)), function(i) dat_psi[,i])
quant <- quant[,2:(ncol(quant))]
stan.dat <- list(quant = quant,
price = price,
inc = as.vector(inc),
dat_psi = dat_psi_list)
weights <-  rep(1, length(inc))
summary(quant)
# default is one
n_classes = 1
hessian = TRUE
algorithm = "MLE"
price_num = NULL
fixed_scale = 0
trunc_data = 0
keep_loglik = 0
print_ll = 1
n_draws = 5
n_chains = 4
n_cores = 4
n_iterations = 500
#dat_class <- as.array(rep(1, nobs), dim = 1)
#source('T:/Code/rmdcev/R/FitMDCEV.R')
#source('T:/Code/rmdcev/R/processMDCEVdata.R')
#source('T:/Code/rmdcev/R/maxLikeMDCEV.R')
#source('T:/Code/rmdcev/R/HierarchicalBayesMDCEV.R')
# initial starting values
initial.parameters <- list(psi = rep(0,ncol(dat_psi)),
scale = as.array(1, dim = 1),
alpha = as.array(0.5, dim = 1),
gamma = rep(1,ncol(quant)))
#devtools::install(local=TRUE)
result <- FitMDCEV(stan.dat,
data_class = dat_class,
weights = weights,
#				   price_num = NULL,
model_specification = model_specification,
n_classes = n_classes,
fixed_scale = fixed_scale,
trunc_data = trunc_data,
seed = 123,
#				   n_iterations = n_iterations, n_chains = n_chains,
algorithm = algorithm,
#	std_errors = "draws", # still need to implement
print_ll = 0,
#mle_tol = 0.0001,
hessian = TRUE,
initial.parameters = initial.parameters,
n_draws = 50,
keep_loglik = 0)
#print(result$stan_fit, pars = c("psi", "gamma", "scale", "alpha", "sum_log_lik"), digits_summary = 2)
#traceplot(result$stan_fit, pars = c("psi", "gamma", "scale", "alpha"), inc_warmup = TRUE)
result$est_pars <- tbl_df(result[["stan_fit"]][["theta_tilde"]]) %>%
select(-starts_with("log_like"), -starts_with("sum_log_lik")) %>%
rowid_to_column("sim_id") %>%
gather(parms, value, -sim_id, factor_key=TRUE)
# MDCEV Model with fixed parameters estimated using MLE or Stan
# Notes:
# Includes LES, Gamma, and Alpha specifications as options
# One set of psi parameters for individual and alternative-specific variables and interactions
# Load Packages ------------------------------------#
rm(list=ls(all=TRUE))
ls()
library(pacman)
p_load(tidyverse, R.matlab, reshape2, rstan, rmdcev)
#---------------------------------------------------------------------------------------
nobs <- 1000 # number of individuals
inc <- 100000 + runif(nobs, 0, 50000) # budget
ngoods <- 10 # number of goods
price <- 5 + matrix(runif(nobs*ngoods, 0, 100), nobs, ngoods)  # price of non-numeraire good
price_num <- 1
nerrs <- 1
weight    <- 1 #Modify if weights are used
nsims <- 1
algo_gen <- 1
model_specification <- "alpha"
beta <- c(-7, 0.5, 2, -1.5, 3, -2, 1, 2)
gamma <- 1 + runif(ngoods, 0, 2)
scale <- 1
fixed_scale <- 0
if (model_specification == "les"){
model_type <- 1
alpha <- c(0.8, rep(0, ngoods))
parms_true <- c(beta, gamma, alpha[1], scale)
} else if (model_specification == "alpha"){
model_type <- 2
alpha <- 0 + runif(ngoods+1, 0.01, .98)
gamma <- rep(1, ngoods)
parms_true <- c(beta, alpha, scale)
} else if (model_specification == "gamma"){
model_type <- 3
alpha <- rep(0.5, ngoods+1)
parms_true <- c(beta, gamma, alpha[1], scale)
} else if (model_specification == "gamma0"){
model_type <- 4
alpha <- rep(0, ngoods+1)
parms_true <- c(beta, gamma, scale)
} else
stop("No model specificied. Choose a model_specification")
parms_true <- tbl_df(parms_true) %>%
rename(parms_true = value)
# Create psi variables that vary over alternatives
b1 <- rep(1,ngoods)
b2 <- c(rep(1,ngoods/2), rep(0, ngoods / 2))
b3 <- rep(c(0,1), ngoods / 2)
psi_j_temp <- list(b1 = b1,
b2 = b2,
b3 = b3)
# Create psi variables that vary by person
psi_socio = 2*matrix(runif(nobs * (length(beta)-3)), nobs,length(beta)-3)
psi_i_temp <- list(b4 = psi_socio[,1],
b5 = psi_socio[,2],
b5 = psi_socio[,3],
b5 = psi_socio[,4],
b5 = psi_socio[,5])
CreateLists <- function(x){
out <- lapply(seq_len(nrow(x)), function(i) x[i,])
return(out)
}
# Create full set of base psi variables
psi_j_temp <- map(psi_j_temp, function(x) {rep(x, each=nobs)})
psi_i_temp <- map(psi_i_temp, function(x) {rep(x, times= ngoods)})
dat_psi = c(psi_j_temp, psi_i_temp)
dat_psi = matrix(unlist(dat_psi), ncol = length(beta))
psi_sims <- matrix(dat_psi %*% beta, ncol = ngoods, byrow = TRUE)
psi_sims <- CreateLists(psi_sims)
psi_sims <- list(psi_sims )
names(psi_sims) <- "psi_sims"
inc_list <- list(as.list(inc))
names(inc_list) <- "inc" # price normalized MU at zero
price_list <- cbind(1, price) #add numeraire price to price matrix (<-1)
price_list <- list(CreateLists(price_list))
names(price_list) <- "price" # price normalized MU at zero
###########################################################################
# Pull individual level data into one list
###########################################################################
df_temp <- c(inc_list, price_list, psi_sims)
# choose number of people to simulate (set to nobs for all)
nobs_sims <- nobs
df_subset <- lapply(df_temp, "[", c(1:nobs_sims))
# To try and get expose as part of package
#options(rccp.cpp.dir="cache")
#model_src <- stanc_builder("src/stan_files/SimulationFunctions.stan")
#expose_stan_functions(model_src, cacheDir = "cache")
#Rcpp::compileAttributes()
wtpcppcode <- stanc("src/stan_files/SimulationFunctions.stan",
model_name = "SimulationFunctions")
start_time <- Sys.time()
expose_stan_functions(wtpcppcode)
quant <- pmap(df_subset, Calcmdemand_rng,
gamma_sim=gamma,
alpha_sim=alpha,
scale_sim=scale,
ngoods=ngoods, nerrs=nerrs, nsims=nsims,
algo_gen = algo_gen)
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
expose_stan_functions(wtpcppcode)
# Hicksian test
psi_p_sims <- psi_sims
names(psi_p_sims) <- "psi_p_sims" # price normalized MU at zero
price_list <- cbind(1, price) #add numeraire price to price matrix (<-1)
price_list <- list(CreateListsRow(price_list))
names(price_list) <- "price" # price normalized MU at zero
price_p <- c(0,rep(10,ngoods))
quant_list <- list(map(quant, function(x){x[,2:(ngoods+1)]}))
names(quant_list) <- "quant_j" # price normalized MU at zero
df_temp <- c(inc_list, quant_list, price_list, psi_sims, psi_p_sims)
df_subset <- lapply(df_temp, "[", c(1:nobs_sims))
hquant_test <- pmap(df_subset, CalchdemandTest_rng,
gamma_sim=gamma,
alpha_sim=alpha,
price_p = price_p,
scale_sim=scale,
ngoods=ngoods, nerrs=nerrs, nsims=nsims,npols = 1,
cond_error = 1,
algo_gen = algo_gen,
model_type = model_type)
end_time <- Sys.time()
end_time - start_time
source("r/helperFunctions.R")
# MDCEV Model with fixed parameters estimated using MLE or Stan
# Notes:
# Includes LES, Gamma, and Alpha specifications as options
# One set of psi parameters for individual and alternative-specific variables and interactions
# Load Packages ------------------------------------#
rm(list=ls(all=TRUE))
ls()
library(pacman)
p_load(tidyverse, R.matlab, reshape2, rstan, rmdcev)
source("r/helperFunctions.R")
#---------------------------------------------------------------------------------------
nobs <- 1000 # number of individuals
inc <- 100000 + runif(nobs, 0, 50000) # budget
ngoods <- 10 # number of goods
price <- 5 + matrix(runif(nobs*ngoods, 0, 100), nobs, ngoods)  # price of non-numeraire good
price_num <- 1
nerrs <- 1
weight    <- 1 #Modify if weights are used
nsims <- 1
algo_gen <- 1
model_specification <- "alpha"
beta <- c(-7, 0.5, 2, -1.5, 3, -2, 1, 2)
gamma <- 1 + runif(ngoods, 0, 2)
scale <- 1
fixed_scale <- 0
if (model_specification == "les"){
model_type <- 1
alpha <- c(0.8, rep(0, ngoods))
parms_true <- c(beta, gamma, alpha[1], scale)
} else if (model_specification == "alpha"){
model_type <- 2
alpha <- 0 + runif(ngoods+1, 0.01, .98)
gamma <- rep(1, ngoods)
parms_true <- c(beta, alpha, scale)
} else if (model_specification == "gamma"){
model_type <- 3
alpha <- rep(0.5, ngoods+1)
parms_true <- c(beta, gamma, alpha[1], scale)
} else if (model_specification == "gamma0"){
model_type <- 4
alpha <- rep(0, ngoods+1)
parms_true <- c(beta, gamma, scale)
} else
stop("No model specificied. Choose a model_specification")
parms_true <- tbl_df(parms_true) %>%
rename(parms_true = value)
# Create psi variables that vary over alternatives
b1 <- rep(1,ngoods)
b2 <- c(rep(1,ngoods/2), rep(0, ngoods / 2))
b3 <- rep(c(0,1), ngoods / 2)
psi_j_temp <- list(b1 = b1,
b2 = b2,
b3 = b3)
# Create psi variables that vary by person
psi_socio = 2*matrix(runif(nobs * (length(beta)-3)), nobs,length(beta)-3)
psi_i_temp <- list(b4 = psi_socio[,1],
b5 = psi_socio[,2],
b5 = psi_socio[,3],
b5 = psi_socio[,4],
b5 = psi_socio[,5])
# Create full set of base psi variables
psi_j_temp <- map(psi_j_temp, function(x) {rep(x, each=nobs)})
psi_i_temp <- map(psi_i_temp, function(x) {rep(x, times= ngoods)})
dat_psi = c(psi_j_temp, psi_i_temp)
dat_psi = matrix(unlist(dat_psi), ncol = length(beta))
psi_sims <- matrix(dat_psi %*% beta, ncol = ngoods, byrow = TRUE)
psi_sims <- CreateListsRow(psi_sims)
psi_sims <- list(psi_sims )
names(psi_sims) <- "psi_sims"
inc_list <- list(as.list(inc))
names(inc_list) <- "inc" # price normalized MU at zero
price_list <- cbind(1, price) #add numeraire price to price matrix (<-1)
price_list <- list(CreateListsRow(price_list))
names(price_list) <- "price" # price normalized MU at zero
###########################################################################
# Pull individual level data into one list
###########################################################################
df_temp <- c(inc_list, price_list, psi_sims)
# choose number of people to simulate (set to nobs for all)
nobs_sims <- nobs
df_subset <- lapply(df_temp, "[", c(1:nobs_sims))
# To try and get expose as part of package
#options(rccp.cpp.dir="cache")
#model_src <- stanc_builder("src/stan_files/SimulationFunctions.stan")
#expose_stan_functions(model_src, cacheDir = "cache")
#Rcpp::compileAttributes()
wtpcppcode <- stanc("src/stan_files/SimulationFunctions.stan",
model_name = "SimulationFunctions")
start_time <- Sys.time()
expose_stan_functions(wtpcppcode)
quant <- pmap(df_subset, Calcmdemand_rng,
gamma_sim=gamma,
alpha_sim=alpha,
scale_sim=scale,
ngoods=ngoods, nerrs=nerrs, nsims=nsims,
algo_gen = algo_gen)
end_time <- Sys.time()
end_time - start_time
psi_p_sims <- psi_sims
names(psi_p_sims) <- "psi_p_sims" # price normalized MU at zero
price_list <- cbind(1, price) #add numeraire price to price matrix (<-1)
price_list <- list(CreateListsRow(price_list))
names(price_list) <- "price" # price normalized MU at zero
price_p <- c(0,rep(10,ngoods))
price_p <- c(0,rep(0,ngoods))
quant_list <- list(map(quant, function(x){x[,2:(ngoods+1)]}))
names(quant_list) <- "quant_j" # price normalized MU at zero
df_temp <- c(inc_list, quant_list, price_list, psi_sims, psi_p_sims)
df_subset <- lapply(df_temp, "[", c(1:nobs_sims))
hquant_test <- pmap(df_subset, CalchdemandTest_rng,
gamma_sim=gamma,
alpha_sim=alpha,
price_p = price_p,
scale_sim=scale,
ngoods=ngoods, nerrs=nerrs, nsims=nsims,npols = 1,
cond_error = 1,
algo_gen = algo_gen,
model_type = model_type)
end_time <- Sys.time()
end_time - start_time
quant_h <- pmap(df_subset, CalchdemandTest_rng,
gamma_sim=gamma,
alpha_sim=alpha,
price_p = price_p,
scale_sim=scale,
ngoods=ngoods, nerrs=nerrs, nsims=nsims,npols = 1,
cond_error = 1,
algo_gen = algo_gen,
model_type = model_type)
end_time <- Sys.time()
end_time - start_time
test <- matrix(unlist(quant), nrow = nobs, byrow = TRUE) - matrix(unlist(quant_h), nrow = nobs, byrow = TRUE)
sum(test)
start_time <- Sys.time()
quant_h <- pmap(df_subset, CalchdemandTest_rng,
gamma_sim=gamma,
alpha_sim=alpha,
price_p = price_p,
scale_sim=scale,
ngoods=ngoods, nerrs=nerrs, nsims=nsims,npols = 1,
cond_error = 1,
algo_gen = algo_gen,
model_type = model_type)
end_time <- Sys.time()
end_time - start_time
test <- matrix(unlist(quant), nrow = nobs, byrow = TRUE) - matrix(unlist(quant_h), nrow = nobs, byrow = TRUE)
sum(test)
?source_test_helpers
Sys.setenv("R_TESTS" = "")
?sourceCpp
sourceCpp("C:/Dropbox/Research/code/rmdcev/src/stan_files/SimulationFunctions.hpp")
sourceCpp("C:/Dropbox/Research/code/rmdcev/src/stan_files/SimulationFunctions.cc")
sourceCpp("C:/Dropbox/Research/code/rmdcev/src/stan_files/SimulationFunctions.o")
sourceCpp("C:/Dropbox/Research/code/rmdcev/src/stan_files/SimulationFunctions.cc")
wtpcppcode <- stanc("C:/Dropbox/Research/code/rmdcev/src/stan_files/SimulationFunctions.stan",
model_name = "SimulationFunctions")
expose_stan_functions(wtpcppcode)
wtpcppcode <- stanc("C:/Dropbox/Research/code/rmdcev/src/stan_files/SimulationFunctions.stan",
model_name = "SimulationFunctions")
View(wtpcppcode)
wtpcppcode[["cppcode"]]
tt <- wtpcppcode$cppcode
fileConn<-file("output.txt")
writeLines(tt, fileConn)
close(fileConn)
fileConn<-file("src/stan_files/output.cpp")
writeLines(tt, fileConn)
close(fileConn)
sourceCpl("src/stan_files/output.cpp")
sourceCpp("src/stan_files/output.cpp")
