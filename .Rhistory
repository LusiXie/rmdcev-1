trunc_data = 0
keep_loglik = 0
print_ll = 1
n_draws = 5
n_chains = 1
n_cores = 1
n_iterations = 100
hb_random_parameters = "fixed"
#data_class <- as.array(rep(1, nobs), dim = 1)
initial.parameters <- list(psi = rep(0,ncol(dat_psi)),
scale = as.array(1, dim = 1),
alpha = as.array(0.5, dim = 1),
gamma = rep(1,ncol(quant)))
#
#	if (algorithm == "HB-Stan")
#		stop("Not set up for HB yet.")
if (algorithm == "HB-Stan" && !is.null(weights))
stop("Weights are not able to be applied for Hierarchical Bayes.")
if (algorithm == "HB-Stan" && n_classes > 1)
stop("Hierarchical Bayes can only be used with one class. Switch algorithm to MLE")
if (identical(dim(data$price), dim(data$quant)) == FALSE)
stop("Price and quant dimension mismatch. Ensure dim(price) = dim(quant)")
mle_options <- list(fixed_scale = fixed_scale,
model = model,
n_classes = n_classes,
trunc_data = trunc_data,
print_ll = print_ll,
hessian = hessian,
n_draws = n_draws,
keep_loglik = keep_loglik)
hb_options <- list(fixed_scale = fixed_scale,
model = model,
n_classes = n_classes,
trunc_data = trunc_data,
n_iterations = n_iterations,
n_chains = n_chains,
hb_random_parameters = hb_random_parameters,
seed = seed,
hb.max.tree.depth = 10, hb.adapt.delta = 0.8,
hb.keep.samples = FALSE, hb.stanfit = TRUE,
hb.prior.mean = 0, hb.prior.sd = 5,
hb.sigma.prior.shape = 1.39435729464721,
hb.sigma.prior.scale = 0.39435729464721,
hb.lkj.prior.shape = 4,
hb.warnings = TRUE, hb.beta.draws.to.keep = 0)
start.time <- proc.time()
#	data <- stan.dat
stan_data <- processMDCEVdata(data, data_class, price_num, mle_options)
# If no user supplied weights, replace weights with vector of ones
if (is.null(weights))
weights <-  rep(1, stan_data$I)
stan_data$weights <- as.vector(weights)
stan_data$print_ll <- print_ll
# allows Stan chains to run in parallel on multiprocessor machines
options(mc.cores = parallel::detectCores())
# Create indices for individual level psi parameters
indexes <- data_frame(individual = rep(1:stan_data$I, each = stan_data$J),
task = rep(1:stan_data$I, each = stan_data$J),
row = 1:(stan_data$I*stan_data$J)) %>%
group_by(task) %>%
summarise(task_individual = first(individual),
start = first(row),
end = last(row))
stan_data$start = indexes$start
stan_data$end = indexes$end
stan_data$task_individual = indexes$task_individual
stan_data$task = indexes$task
stan_data$IJ = stan_data$I * stan_data$J
stan_data$lkj_shape = hb_options$hb.lkj.prior.shape
#	initial.parameters2 <- list(initial.parameters)#, initial.parameters,initial.parameters,initial.parameters)
#	initial.parameters2 <- list(list(scale = as.array(1, dim = 1)))#, initial.parameters,initial.parameters,initial.parameters)
#	has.covariates <- !is.null(stan_data$covariates)
stan.model <- stanModel(hb_options$hb_random_parameters)
stan("C:/Dropbox/Research/code/rmdcev/src/stan_files/mdcev.stan",
data = stan_data, chains = n_chains, iter = n_iterations)
stan_data <- processMDCEVdata(data, data_class, price_num, mle_options)
data <- stan.dat
stan_data <- processMDCEVdata(data, data_class, price_num, mle_options)
# If no user supplied weights, replace weights with vector of ones
if (is.null(weights))
weights <-  rep(1, stan_data$I)
stan_data$weights <- as.vector(weights)
stan_data$print_ll <- print_ll
# allows Stan chains to run in parallel on multiprocessor machines
options(mc.cores = parallel::detectCores())
# Create indices for individual level psi parameters
indexes <- data_frame(individual = rep(1:stan_data$I, each = stan_data$J),
task = rep(1:stan_data$I, each = stan_data$J),
row = 1:(stan_data$I*stan_data$J)) %>%
group_by(task) %>%
summarise(task_individual = first(individual),
start = first(row),
end = last(row))
stan_data$start = indexes$start
stan_data$end = indexes$end
stan_data$task_individual = indexes$task_individual
stan_data$task = indexes$task
stan_data$IJ = stan_data$I * stan_data$J
stan_data$lkj_shape = hb_options$hb.lkj.prior.shape
#	initial.parameters2 <- list(initial.parameters)#, initial.parameters,initial.parameters,initial.parameters)
#	initial.parameters2 <- list(list(scale = as.array(1, dim = 1)))#, initial.parameters,initial.parameters,initial.parameters)
stan("C:/Dropbox/Research/code/rmdcev/src/stan_files/mdcev.stan",
data = stan_data, chains = n_chains, iter = n_iterations)
stan("C:/Dropbox/Research/code/rmdcev/src/stan_files/mdcev.stan",
data = stan_data, chains = n_chains, iter = 200)
library(rmdcev)
library(rmdcev)
stan_est <- FitMDCEV(stan.dat,
#		   data_class = data_class,
#				   weights = weights,
#				   price_num = NULL,
model = model,
n_classes = n_classes,
fixed_scale = fixed_scale,
trunc_data = trunc_data,
seed = 123,
algorithm = algorithm,
n_iterations = n_iterations, n_chains = n_chains,
hb_random_parameters = hb_random_parameters,
#	std_errors = "draws", # still need to implement
print_ll = 0,
#mle_tol = 0.0001,
hessian = TRUE,
#	   initial.parameters = initial.parameters,
n_draws = 30,
keep_loglik = 0)
stan_est <- FitMDCEV(stan.dat,
#		   data_class = data_class,
#				   weights = weights,
#				   price_num = NULL,
model = model,
n_classes = n_classes,
fixed_scale = fixed_scale,
trunc_data = trunc_data,
seed = 123,
algorithm = algorithm,
n_iterations = n_iterations, n_chains = n_chains,
hb_random_parameters = hb_random_parameters,
#	std_errors = "draws", # still need to implement
print_ll = 0,
#mle_tol = 0.0001,
hessian = TRUE,
#	   initial.parameters = initial.parameters,
n_draws = 30,
keep_loglik = 0)
library(rmdcev)
stan_est <- FitMDCEV(stan.dat,
#		   data_class = data_class,
#				   weights = weights,
#				   price_num = NULL,
model = model,
n_classes = n_classes,
fixed_scale = fixed_scale,
trunc_data = trunc_data,
seed = 123,
algorithm = algorithm,
n_iterations = n_iterations, n_chains = n_chains,
hb_random_parameters = hb_random_parameters,
#	std_errors = "draws", # still need to implement
print_ll = 0,
#mle_tol = 0.0001,
hessian = TRUE,
#	   initial.parameters = initial.parameters,
n_draws = 30,
keep_loglik = 0)
stan_est <- FitMDCEV(stan.dat,
#		   data_class = data_class,
#				   weights = weights,
#				   price_num = NULL,
model = model,
n_classes = n_classes,
fixed_scale = fixed_scale,
trunc_data = trunc_data,
seed = 123,
algorithm = algorithm,
n_iterations = n_iterations, n_chains = n_chains,
hb_random_parameters = hb_random_parameters,
#	std_errors = "draws", # still need to implement
print_ll = 0,
#mle_tol = 0.0001,
hessian = TRUE,
#	   initial.parameters = initial.parameters,
n_draws = 30,
keep_loglik = 0)
# MDCEV Model with fixed parameters estimated using MLE or Stan
# Notes:
# Includes LES, Gamma, and Alpha specifications as options
# One set of psi parameters for individual and alternative-specific variables and interactions
# Load Packages ------------------------------------#
rm(list=ls(all=TRUE))
ls()
library(pacman)
p_load(tidyverse, R.matlab, reshape2, rstan, rmdcev)
#source("r/helperFunctions.R")
#---------------------------------------------------------------------------------------
# user input
nobs <- 1000 # number of individuals
inc <- 100000 + runif(nobs, 0, 50000) # budget
ngoods <- 5 # number of goods
price <- 5 + matrix(runif(nobs*ngoods, 0, 100), nobs, ngoods)  # price of non-numeraire good
price_num <- 1
nerrs <- 1
weight <- 1 #Modify if weights are used
nsims <- 1
algo_gen <- 0
model <- "gamma"
beta <- c(-1, 0.5, 2, -1.5, 3, -2, 1, 2)
gamma <- 1 + runif(ngoods, 0, 2)
scale <- 1
fixed_scale <- 0
#---------------------------------------------------------------------------------------
if (model == "les"){
model_num <- 1
alpha <- c(0.8, rep(0, ngoods))
parms_true <- c(beta, gamma, alpha[1], scale)
} else if (model == "alpha"){
model_num <- 2
alpha <- 0 + runif(ngoods+1, 0.01, .98)
gamma <- rep(1, ngoods)
parms_true <- c(beta, alpha, scale)
} else if (model == "gamma"){
model_num <- 3
alpha <- rep(0.5, ngoods+1)
parms_true <- c(beta, gamma, alpha[1], scale)
} else if (model == "gamma0"){
model_num <- 4
alpha <- rep(0, ngoods+1)
parms_true <- c(beta, gamma, scale)
} else
stop("No model specificied. Choose a model")
parms_true <- tbl_df(parms_true) %>%
rename(parms_true = value)
# Create psi variables that vary over alternatives
b1 <- rep(1,ngoods)
b2 <- rbinom(ngoods, 1, 0.5)
b3 <- rbinom(ngoods, 1, 0.5)
psi_j_temp <- list(b1 = b1,
b2 = b2,
b3 = b3)
# Create psi variables that vary by person
psi_socio = 2*matrix(runif(nobs * (length(beta)-3)), nobs,length(beta)-3)
psi_i_temp <- list(b4 = psi_socio[,1],
b5 = psi_socio[,2],
b5 = psi_socio[,3],
b5 = psi_socio[,4],
b5 = psi_socio[,5])
# Create full set of base psi variables
psi_j_temp <- map(psi_j_temp, function(x) {rep(x, each=nobs)})
psi_i_temp <- map(psi_i_temp, function(x) {rep(x, times= ngoods)})
dat_psi = c(psi_j_temp, psi_i_temp)
dat_psi = matrix(unlist(dat_psi), ncol = length(beta))
psi_sims <- matrix(dat_psi %*% beta, ncol = ngoods, byrow = TRUE)
psi_sims <- CreateListsRow(psi_sims)
psi_sims <- list(psi_sims )
names(psi_sims) <- "psi_sims"
inc_list <- list(as.list(inc))
names(inc_list) <- "inc" # price normalized MU at zero
price_list <- cbind(1, price) #add numeraire price to price matrix (<-1)
price_list <- list(CreateListsRow(price_list))
names(price_list) <- "price" # price normalized MU at zero
###########################################################################
# Pull individual level data into one list
###########################################################################
df_temp <- c(inc_list, price_list, psi_sims)
# choose number of people to simulate (set to nobs for all)
nobs_sims <- nobs
df_subset <- lapply(df_temp, "[", c(1:nobs_sims))
# To try and get expose as part of package
#options(rccp.cpp.dir="cache")
#model_src <- stanc_builder("src/stan_files/SimulationFunctions.stan")
#expose_stan_functions(model_src, cacheDir = "cache")
wtpcppcode <- stanc("src/stan_files/SimulationFunctions.stan",
model_name = "SimulationFunctions")
start_time <- Sys.time()
expose_stan_functions(wtpcppcode)
quant <- pmap(df_subset, Calcmdemand_rng,
gamma_sim=gamma,
alpha_sim=alpha,
scale_sim=scale,
nerrs=nerrs,algo_gen = algo_gen)
end_time <- Sys.time()
end_time - start_time
# Convert simulated data into estimation data
quant <- matrix(unlist(quant), nrow = nobs, byrow = TRUE)
dat_psi_list <- lapply(seq_len(ncol(dat_psi)), function(i) dat_psi[,i])
quant <- quant[,2:(ncol(quant))]
stan.dat <- list(quant = quant,
price = price,
inc = as.vector(inc),
dat_psi = dat_psi_list)
weights <-  rep(1, length(inc))
summary(quant)
# default is one
n_classes = 1
hessian = TRUE
algorithm = "HB"
price_num = NULL
fixed_scale = 0
trunc_data = 0
keep_loglik = 0
print_ll = 1
n_draws = 5
n_chains = 1
n_cores = 1
n_iterations = 100
hb_random_parameters = "fixed"
#data_class <- as.array(rep(1, nobs), dim = 1)
#source('T:/Code/rmdcev/R/FitMDCEV.R')
#source('T:/Code/rmdcev/R/processMDCEVdata.R')
#source('T:/Code/rmdcev/R/maxLikeMDCEV.R')
#source('T:/Code/rmdcev/R/HierarchicalBayesMDCEV.R')
# initial starting values
initial.parameters <- list(psi = rep(0,ncol(dat_psi)),
scale = as.array(1, dim = 1),
alpha = as.array(0.5, dim = 1),
gamma = rep(1,ncol(quant)))
#devtools::install(local=TRUE)
if (algorithm == "HB-Stan" && !is.null(weights))
stop("Weights are not able to be applied for Hierarchical Bayes.")
if (algorithm == "HB-Stan" && n_classes > 1)
stop("Hierarchical Bayes can only be used with one class. Switch algorithm to MLE")
if (identical(dim(data$price), dim(data$quant)) == FALSE)
stop("Price and quant dimension mismatch. Ensure dim(price) = dim(quant)")
mle_options <- list(fixed_scale = fixed_scale,
model = model,
n_classes = n_classes,
trunc_data = trunc_data,
print_ll = print_ll,
hessian = hessian,
n_draws = n_draws,
keep_loglik = keep_loglik)
hb_options <- list(fixed_scale = fixed_scale,
model = model,
n_classes = n_classes,
trunc_data = trunc_data,
n_iterations = n_iterations,
n_chains = n_chains,
hb_random_parameters = hb_random_parameters,
seed = seed,
hb.max.tree.depth = 10, hb.adapt.delta = 0.8,
hb.keep.samples = FALSE, hb.stanfit = TRUE,
hb.prior.mean = 0, hb.prior.sd = 5,
hb.sigma.prior.shape = 1.39435729464721,
hb.sigma.prior.scale = 0.39435729464721,
hb.lkj.prior.shape = 4,
hb.warnings = TRUE, hb.beta.draws.to.keep = 0)
seed = 123
data <-stan.dat
if (algorithm == "HB-Stan" && !is.null(weights))
stop("Weights are not able to be applied for Hierarchical Bayes.")
if (algorithm == "HB-Stan" && n_classes > 1)
stop("Hierarchical Bayes can only be used with one class. Switch algorithm to MLE")
if (identical(dim(data$price), dim(data$quant)) == FALSE)
stop("Price and quant dimension mismatch. Ensure dim(price) = dim(quant)")
mle_options <- list(fixed_scale = fixed_scale,
model = model,
n_classes = n_classes,
trunc_data = trunc_data,
print_ll = print_ll,
hessian = hessian,
n_draws = n_draws,
keep_loglik = keep_loglik)
hb_options <- list(fixed_scale = fixed_scale,
model = model,
n_classes = n_classes,
trunc_data = trunc_data,
n_iterations = n_iterations,
n_chains = n_chains,
hb_random_parameters = hb_random_parameters,
seed = seed,
hb.max.tree.depth = 10, hb.adapt.delta = 0.8,
hb.keep.samples = FALSE, hb.stanfit = TRUE,
hb.prior.mean = 0, hb.prior.sd = 5,
hb.sigma.prior.shape = 1.39435729464721,
hb.sigma.prior.scale = 0.39435729464721,
hb.lkj.prior.shape = 4,
hb.warnings = TRUE, hb.beta.draws.to.keep = 0)
start.time <- proc.time()
#	data <- stan.dat
stan_data <- processMDCEVdata(data, data_class, price_num, mle_options)
# If no user supplied weights, replace weights with vector of ones
if (is.null(weights))
weights <-  rep(1, stan_data$I)
stan_data$weights <- as.vector(weights)
stan_data$print_ll <- print_ll
# allows Stan chains to run in parallel on multiprocessor machines
options(mc.cores = parallel::detectCores())
# Create indices for individual level psi parameters
indexes <- data_frame(individual = rep(1:stan_data$I, each = stan_data$J),
task = rep(1:stan_data$I, each = stan_data$J),
row = 1:(stan_data$I*stan_data$J)) %>%
group_by(task) %>%
summarise(task_individual = first(individual),
start = first(row),
end = last(row))
stan_data$start = indexes$start
stan_data$end = indexes$end
stan_data$task_individual = indexes$task_individual
stan_data$task = indexes$task
stan_data$IJ = stan_data$I * stan_data$J
stan_data$lkj_shape = hb_options$hb.lkj.prior.shape
#	initial.parameters2 <- list(initial.parameters)#, initial.parameters,initial.parameters,initial.parameters)
#	initial.parameters2 <- list(list(scale = as.array(1, dim = 1)))#, initial.parameters,initial.parameters,initial.parameters)
algorithm = "HB"
# MDCEV Model with fixed parameters estimated using MLE or Stan
# Notes:
# Includes LES, Gamma, and Alpha specifications as options
# One set of psi parameters for individual and alternative-specific variables and interactions
# Load Packages ------------------------------------#
rm(list=ls(all=TRUE))
ls()
library(pacman)
p_load(tidyverse, R.matlab, reshape2, rstan, rmdcev)
#source("r/helperFunctions.R")
#---------------------------------------------------------------------------------------
# user input
nobs <- 1000 # number of individuals
inc <- 100000 + runif(nobs, 0, 50000) # budget
ngoods <- 5 # number of goods
price <- 5 + matrix(runif(nobs*ngoods, 0, 100), nobs, ngoods)  # price of non-numeraire good
price_num <- 1
nerrs <- 1
weight <- 1 #Modify if weights are used
nsims <- 1
algo_gen <- 0
model <- "gamma"
beta <- c(-1, 0.5, 2, -1.5, 3, -2, 1, 2)
gamma <- 1 + runif(ngoods, 0, 2)
scale <- 1
fixed_scale <- 0
#---------------------------------------------------------------------------------------
if (model == "les"){
model_num <- 1
alpha <- c(0.8, rep(0, ngoods))
parms_true <- c(beta, gamma, alpha[1], scale)
} else if (model == "alpha"){
model_num <- 2
alpha <- 0 + runif(ngoods+1, 0.01, .98)
gamma <- rep(1, ngoods)
parms_true <- c(beta, alpha, scale)
} else if (model == "gamma"){
model_num <- 3
alpha <- rep(0.5, ngoods+1)
parms_true <- c(beta, gamma, alpha[1], scale)
} else if (model == "gamma0"){
model_num <- 4
alpha <- rep(0, ngoods+1)
parms_true <- c(beta, gamma, scale)
} else
stop("No model specificied. Choose a model")
parms_true <- tbl_df(parms_true) %>%
rename(parms_true = value)
# Create psi variables that vary over alternatives
b1 <- rep(1,ngoods)
b2 <- rbinom(ngoods, 1, 0.5)
b3 <- rbinom(ngoods, 1, 0.5)
psi_j_temp <- list(b1 = b1,
b2 = b2,
b3 = b3)
# Create psi variables that vary by person
psi_socio = 2*matrix(runif(nobs * (length(beta)-3)), nobs,length(beta)-3)
psi_i_temp <- list(b4 = psi_socio[,1],
b5 = psi_socio[,2],
b5 = psi_socio[,3],
b5 = psi_socio[,4],
b5 = psi_socio[,5])
# Create full set of base psi variables
psi_j_temp <- map(psi_j_temp, function(x) {rep(x, each=nobs)})
psi_i_temp <- map(psi_i_temp, function(x) {rep(x, times= ngoods)})
dat_psi = c(psi_j_temp, psi_i_temp)
dat_psi = matrix(unlist(dat_psi), ncol = length(beta))
psi_sims <- matrix(dat_psi %*% beta, ncol = ngoods, byrow = TRUE)
psi_sims <- CreateListsRow(psi_sims)
psi_sims <- list(psi_sims )
names(psi_sims) <- "psi_sims"
inc_list <- list(as.list(inc))
names(inc_list) <- "inc" # price normalized MU at zero
price_list <- cbind(1, price) #add numeraire price to price matrix (<-1)
price_list <- list(CreateListsRow(price_list))
names(price_list) <- "price" # price normalized MU at zero
###########################################################################
# Pull individual level data into one list
###########################################################################
df_temp <- c(inc_list, price_list, psi_sims)
# choose number of people to simulate (set to nobs for all)
nobs_sims <- nobs
df_subset <- lapply(df_temp, "[", c(1:nobs_sims))
# To try and get expose as part of package
#options(rccp.cpp.dir="cache")
#model_src <- stanc_builder("src/stan_files/SimulationFunctions.stan")
#expose_stan_functions(model_src, cacheDir = "cache")
wtpcppcode <- stanc("src/stan_files/SimulationFunctions.stan",
model_name = "SimulationFunctions")
start_time <- Sys.time()
expose_stan_functions(wtpcppcode)
quant <- pmap(df_subset, Calcmdemand_rng,
gamma_sim=gamma,
alpha_sim=alpha,
scale_sim=scale,
nerrs=nerrs,algo_gen = algo_gen)
end_time <- Sys.time()
end_time - start_time
# Convert simulated data into estimation data
quant <- matrix(unlist(quant), nrow = nobs, byrow = TRUE)
dat_psi_list <- lapply(seq_len(ncol(dat_psi)), function(i) dat_psi[,i])
quant <- quant[,2:(ncol(quant))]
stan.dat <- list(quant = quant,
price = price,
inc = as.vector(inc),
dat_psi = dat_psi_list)
weights <-  rep(1, length(inc))
summary(quant)
