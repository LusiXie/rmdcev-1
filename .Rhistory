###########################################################################
npols <- 2 #stan_est$stan_data[["J"]]
policies<-	CreateBlankPolicies(npols, stan_est$stan_data[["J"]], stan_est$stan_data[["dat_psi"]])
# Closing each site individual than all together
#price_p <- cbind(0,diag(stan_est$stan_data[["J"]]))
#policies$price_p <- CreateListsRow(price_p)
#price_p <- rbind(price_p, c(0,rep(100000000,ngoods)))# add all closures to price_list
#price_p <- rbind(c(0,100000000,rep(100000000,ngoods-1)), c(0,rep(100000000,ngoods)))# add all closures to price_list
wtp2 <- SimulateWTP(stan_est, policies, algo_gen = 0, nsims = 3, nerrs = 3)
source('C:/Dropbox/Research/code/rmdcev/R/PrepareSimulationData.R')
###########################################################################
# Create policy scenarios (can affect price only at this point)
###########################################################################
npols <- 2 #stan_est$stan_data[["J"]]
policies<-	CreateBlankPolicies(npols, stan_est$stan_data[["J"]], stan_est$stan_data[["dat_psi"]])
df_wtp <- PrepareSimulationData(stan_est, policies, nsims = 3)
source('C:/Dropbox/Research/code/rmdcev/R/PrepareSimulationData.R')
df_wtp <- PrepareSimulationData(stan_est, policies, nsims = 3)
source('C:/Dropbox/Research/code/rmdcev/R/SimulateWTP.R')
source('C:/Dropbox/Research/code/rmdcev/R/PrepareSimulationData.R')
df_wtp <- PrepareSimulationData(stan_est, policies, nsims = 3)
source('C:/Dropbox/Research/code/rmdcev/R/PrepareSimulationData.R')
View(stan_est)
source('C:/Dropbox/Research/code/rmdcev/R/PrepareSimulationData.R')
df_wtp <- PrepareSimulationData(stan_est, policies, nsims = 3)
source('C:/Dropbox/Research/code/rmdcev/R/SimulateWTP.R')
df_wtp <- PrepareSimulationData(stan_est, policies, nsims = 3)
wtp <- SimulateWTP(df_wtp, policies, algo_gen = 0, nerrs = 3)
rm(list=ls(all=TRUE))
ls()
# Load Packages ------------------------------------#
library(pacman)
p_load(tidyverse, rstan, rmdcev)
# Import Data ------------------------------------#
load("C:/Dropbox/Research/code/mdcev_sim.RData")
# Set functions ------------------------------------#
#source("r/helperFunctions.R")
source("r/PrepareSimulationData.R")
#source("r/CreateSimulationData.R")
#source("r/SimulateWTP.R")
###########################################################################
# Create policy scenarios (can affect price only at this point)
###########################################################################
npols <- 2 #stan_est$stan_data[["J"]]
policies<-	CreateBlankPolicies(npols, stan_est$stan_data[["J"]], stan_est$stan_data[["dat_psi"]])
# Closing each site individual than all together
#price_p <- cbind(0,diag(stan_est$stan_data[["J"]]))
#policies$price_p <- CreateListsRow(price_p)
#price_p <- rbind(price_p, c(0,rep(100000000,ngoods)))# add all closures to price_list
#price_p <- rbind(c(0,100000000,rep(100000000,ngoods-1)), c(0,rep(100000000,ngoods)))# add all closures to price_list
df_wtp <- PrepareSimulationData(stan_est, policies, nsims = 3)
wtp <- SimulateWTP(df_wtp, policies, algo_gen = 0, nerrs = 3)
rm(list=ls(all=TRUE))
ls()
# Load Packages ------------------------------------#
library(pacman)
p_load(tidyverse, rstan, rmdcev)
# Import Data ------------------------------------#
load("C:/Dropbox/Research/code/mdcev_sim.RData")
# Set functions ------------------------------------#
#source("r/helperFunctions.R")
source("r/PrepareSimulationData.R")
#source("r/CreateSimulationData.R")
#source("r/SimulateWTP.R")
###########################################################################
# Create policy scenarios (can affect price only at this point)
###########################################################################
npols <- 2 #stan_est$stan_data[["J"]]
policies<-	CreateBlankPolicies(npols, stan_est$stan_data[["J"]], stan_est$stan_data[["dat_psi"]])
# Closing each site individual than all together
#price_p <- cbind(0,diag(stan_est$stan_data[["J"]]))
#policies$price_p <- CreateListsRow(price_p)
#price_p <- rbind(price_p, c(0,rep(100000000,ngoods)))# add all closures to price_list
#price_p <- rbind(c(0,100000000,rep(100000000,ngoods-1)), c(0,rep(100000000,ngoods)))# add all closures to price_list
df_wtp <- PrepareSimulationData(stan_est, policies, nsims = 3)
View(df_wtp)
source('C:/Dropbox/Research/code/rmdcev/R/SimulateWTP.R')
wtp <- SimulateWTP(df_wtp, policies, algo_gen = 0, nerrs = 3)
rm(list=ls(all=TRUE))
ls()
# Load Packages ------------------------------------#
library(pacman)
p_load(tidyverse, rstan, rmdcev)
# Import Data ------------------------------------#
load("C:/Dropbox/Research/code/mdcev_sim.RData")
# Set functions ------------------------------------#
#source("r/helperFunctions.R")
source("r/PrepareSimulationData.R")
#source("r/CreateSimulationData.R")
source("r/SimulateWTP.R")
###########################################################################
# Create policy scenarios (can affect price only at this point)
###########################################################################
npols <- 2 #stan_est$stan_data[["J"]]
policies<-	CreateBlankPolicies(npols, stan_est$stan_data[["J"]], stan_est$stan_data[["dat_psi"]])
# Closing each site individual than all together
#price_p <- cbind(0,diag(stan_est$stan_data[["J"]]))
#policies$price_p <- CreateListsRow(price_p)
#price_p <- rbind(price_p, c(0,rep(100000000,ngoods)))# add all closures to price_list
#price_p <- rbind(c(0,100000000,rep(100000000,ngoods-1)), c(0,rep(100000000,ngoods)))# add all closures to price_list
df_wtp <- PrepareSimulationData(stan_est, policies, nsims = 3)
wtp <- SimulateWTP(df_wtp, policies, algo_gen = 0, nerrs = 3)
library(rmdcev)
wtp <- SimulateWTP(df_wtp, algo_gen = 0, nerrs = 3)
library(rmdcev)
library(rmdcev)
library(rmdcev)
library(devtools)
install_github("plloydsmith/rmdcev")
library(pacman)
p_load(rmdcev)
sim.data <- SimulateMdcevData(model = "gamma", nobs = 1000, ngoods = 10)
?rmdcev
sim.data <- SimulateMdcevData(model = "gamma", nobs = 1000, ngoods = 10)
sim.data <- SimulateMdcevData(model = "gamma", nobs = 1000, ngoods = 10)
library(rmdcev)
library(rmdcev)
sim.data <- SimulateMdcevData(model = "gamma", nobs = 1000, ngoods = 10)
library(rmdcev)
sim.data <- SimulateMdcevData(model = "gamma", nobs = 1000, ngoods = 10)
library(pacman)
p_load(tidyverse, rmdcev)
sim.data <- SimulateMdcevData(model = "gamma", nobs = 1000, ngoods = 10)
stan_est <- FitMDCEV(psi_formula = ~ b1 + b2 + b3 + b4 + b5 + b6 + b7 + b8-1,
data = sim.data$data,
model = model,
n_classes = 1,
algorithm = "MLE",
hessian = TRUE,
n_draws = 30)
model <- "gamma"
stan_est <- FitMDCEV(psi_formula = ~ b1 + b2 + b3 + b4 + b5 + b6 + b7 + b8-1,
data = sim.data$data,
model = model,
n_classes = 1,
algorithm = "MLE",
hessian = TRUE,
n_draws = 30)
stan_est <- FitMDCEV(psi_formula = ~ b1 + b2 + b3 + b4 + b5 + b6 + b7 + b8-1,
data = sim.data$data,
model = model,
n_classes = 1,
algorithm = "MLE",
hessian = TRUE,
n_draws = 30)
library(pacman)
p_load(tidyverse, rmdcev)
model <- "gamma"
sim.data <- SimulateMdcevData(model = model, nobs = 1000, ngoods = 10)
stan_est <- FitMDCEV(psi_formula = ~ b1 + b2 + b3 + b4 + b5 + b6 + b7 + b8-1,
data = sim.data$data,
model = model,
n_classes = 1,
algorithm = "MLE",
hessian = TRUE,
n_draws = 30)
stan_est <- FitMDCEV(psi_formula = ~ b1 + b2 + b3 + b4 + b5 + b6 + b7 + b8-1,
data = sim.data$data,
model = gamma",
n_classes = 1,
algorithm = "MLE",
hessian = TRUE,
n_draws = 30)
stan_est <- FitMDCEV(psi_formula = ~ b1 + b2 + b3 + b4 + b5 + b6 + b7 + b8-1,
data = sim.data$data,
model = "gamma",
n_classes = 1,
algorithm = "MLE",
hessian = TRUE,
n_draws = 30)
library(rmdcev)
stan_est <- FitMDCEV(psi_formula = ~ b1 + b2 + b3 + b4 + b5 + b6 + b7 + b8-1,
data = sim.data$data,
model = model,
algorithm = "MLE")
stan_est <- FitMDCEV(psi_formula = ~ b1 + b2 + b3 + b4 + b5 + b6 + b7 + b8-1,
data = sim.data$data,
model = model,
algorithm = "MLE")
stan_est <- FitMDCEV(psi_formula = ~ b1 + b2 + b3 + b4 + b5 + b6 + b7 + b8-1,
lc_formula = ~ b4 + b5 + b6 + b7 + b8,
data = data,
#				   weights = weights,
model = model,
n_classes = n_classes,
fixed_scale = fixed_scale,
trunc_data = trunc_data,
seed = 123,
algorithm = algorithm,
n_iterations = n_iterations, n_chains = n_chains,
hb_random_parameters = hb_random_parameters,
#	std_errors = "draws", # still need to implement
print_ll = 0,
#mle_tol = 0.0001,
hessian = TRUE,
#	   initial.parameters = initial.parameters,
n_draws = 50,
keep_loglik = 0)
data <- sim.data$data
stan_est <- FitMDCEV(psi_formula = ~ b1 + b2 + b3 + b4 + b5 + b6 + b7 + b8-1,
lc_formula = ~ b4 + b5 + b6 + b7 + b8,
data = data,
#				   weights = weights,
model = model,
n_classes = n_classes,
fixed_scale = fixed_scale,
trunc_data = trunc_data,
seed = 123,
algorithm = algorithm,
n_iterations = n_iterations, n_chains = n_chains,
hb_random_parameters = hb_random_parameters,
#	std_errors = "draws", # still need to implement
print_ll = 0,
#mle_tol = 0.0001,
hessian = TRUE,
#	   initial.parameters = initial.parameters,
n_draws = 50,
keep_loglik = 0)
algorithm = "MLE"
# default is one
n_classes = 1
hessian = TRUE
algorithm = "MLE"
num_price = NULL
fixed_scale = 0
trunc_data = 0
keep_loglik = 0
print_ll = 1
n_draws = 5
n_chains = 4
n_cores = 4
n_iterations = 200
hb_random_parameters = "fixed"
stan_est <- FitMDCEV(psi_formula = ~ b1 + b2 + b3 + b4 + b5 + b6 + b7 + b8-1,
lc_formula = ~ b4 + b5 + b6 + b7 + b8,
data = data,
#				   weights = weights,
model = model,
n_classes = n_classes,
fixed_scale = fixed_scale,
trunc_data = trunc_data,
seed = 123,
algorithm = algorithm,
n_iterations = n_iterations, n_chains = n_chains,
hb_random_parameters = hb_random_parameters,
#	std_errors = "draws", # still need to implement
print_ll = 0,
#mle_tol = 0.0001,
hessian = TRUE,
#	   initial.parameters = initial.parameters,
n_draws = 50,
keep_loglik = 0)
library(rmdcev)
stan_est <- FitMDCEV(psi_formula = ~ b1 + b2 + b3 + b4 + b5 + b6 + b7 + b8-1,
data = sim.data$data,
model = model,
algorithm = "MLE")
# default is one
n_classes = 1
hessian = TRUE
algorithm = "MLE"
num_price = NULL
fixed_scale = 0
trunc_data = 0
keep_loglik = 0
print_ll = 1
n_draws = 5
n_chains = 4
n_cores = 4
n_iterations = 200
hb_random_parameters = "fixed"
stan_est <- FitMDCEV(psi_formula = ~ b1 + b2 + b3 + b4 + b5 + b6 + b7 + b8-1,
lc_formula = ~ b4 + b5 + b6 + b7 + b8,
data = data,
#				   weights = weights,
model = model,
n_classes = n_classes,
fixed_scale = fixed_scale,
trunc_data = trunc_data,
seed = 123,
algorithm = algorithm,
n_iterations = n_iterations, n_chains = n_chains,
hb_random_parameters = hb_random_parameters,
#	std_errors = "draws", # still need to implement
print_ll = 0,
#mle_tol = 0.0001,
hessian = TRUE,
#	   initial.parameters = initial.parameters,
n_draws = 50,
keep_loglik = 0)
stan_est <- FitMDCEV(psi_formula = ~ b1 + b2 + b3 + b4 + b5 + b6 + b7 + b8-1,
data = sim.data$data,
model = "gamma",
algorithm = "MLE")
stan_est <- FitMDCEV(psi_formula = ~ b1 + b2 + b3 + b4 + b5 + b6 + b7 + b8-1,
#	 lc_formula = ~ b4 + b5 + b6 + b7 + b8,
data = data,
#				   weights = weights,
model = model,
n_classes = n_classes,
fixed_scale = fixed_scale,
trunc_data = trunc_data,
seed = 123,
algorithm = algorithm,
n_iterations = n_iterations, n_chains = n_chains,
hb_random_parameters = hb_random_parameters,
#	std_errors = "draws", # still need to implement
print_ll = 0,
#mle_tol = 0.0001,
hessian = TRUE,
#	   initial.parameters = initial.parameters,
n_draws = 50,
keep_loglik = 0)
stan_est <- FitMDCEV(psi_formula = ~ b1 + b2 + b3 + b4 + b5 + b6 + b7 + b8-1,
#	 lc_formula = ~ b4 + b5 + b6 + b7 + b8,
data = data,
#				   weights = weights,
model = model,
#				   n_classes = n_classes,
#				   fixed_scale = fixed_scale,
#				   trunc_data = trunc_data,
#				   seed = 123,
algorithm = algorithm,
#				   n_iterations = n_iterations, n_chains = n_chains,
#					hb_random_parameters = hb_random_parameters,
#	std_errors = "draws", # still need to implement
#				   print_ll = 0,
#mle_tol = 0.0001,
#				   hessian = TRUE,
#	   initial.parameters = initial.parameters,
n_draws = 50,
keep_loglik = 0)
stan_est <- FitMDCEV(psi_formula = ~ b1 + b2 + b3 + b4 + b5 + b6 + b7 + b8-1,
#	 lc_formula = ~ b4 + b5 + b6 + b7 + b8,
data = data,
#				   weights = weights,
model = model,
#				   n_classes = n_classes,
#				   fixed_scale = fixed_scale,
#				   trunc_data = trunc_data,
#				   seed = 123,
algorithm = algorithm,
#				   n_iterations = n_iterations, n_chains = n_chains,
#					hb_random_parameters = hb_random_parameters,
#	std_errors = "draws", # still need to implement
#				   print_ll = 0,
#mle_tol = 0.0001,
hessian = TRUE,
#	   initial.parameters = initial.parameters,
n_draws = 50,
keep_loglik = 0)
stan_est <- FitMDCEV(psi_formula = ~ b1 + b2 + b3 + b4 + b5 + b6 + b7 + b8-1,
#	 lc_formula = ~ b4 + b5 + b6 + b7 + b8,
data = data,
#				   weights = weights,
model = model,
#				   n_classes = n_classes,
#				   fixed_scale = fixed_scale,
#				   trunc_data = trunc_data,
#				   seed = 123,
algorithm = algorithm,
#				   n_iterations = n_iterations, n_chains = n_chains,
#					hb_random_parameters = hb_random_parameters,
#	std_errors = "draws", # still need to implement
print_ll = 0,
#mle_tol = 0.0001,
hessian = TRUE,
#	   initial.parameters = initial.parameters,
n_draws = 50,
keep_loglik = 0)
stan_est <- FitMDCEV(psi_formula = ~ b1 + b2 + b3 + b4 + b5 + b6 + b7 + b8-1,
#	 lc_formula = ~ b4 + b5 + b6 + b7 + b8,
data = data,
#				   weights = weights,
model = model,
#				   n_classes = n_classes,
#				   fixed_scale = fixed_scale,
#				   trunc_data = trunc_data,
#				   seed = 123,
algorithm = algorithm,
n_iterations = n_iterations, n_chains = n_chains,
#					hb_random_parameters = hb_random_parameters,
#	std_errors = "draws", # still need to implement
print_ll = 0,
#mle_tol = 0.0001,
hessian = TRUE,
#	   initial.parameters = initial.parameters,
n_draws = 50,
keep_loglik = 0)
stan_est <- FitMDCEV(psi_formula = ~ b1 + b2 + b3 + b4 + b5 + b6 + b7 + b8-1,
#	 lc_formula = ~ b4 + b5 + b6 + b7 + b8,
data = data,
#				   weights = weights,
model = model,
n_classes = n_classes,
#				   fixed_scale = fixed_scale,
#				   trunc_data = trunc_data,
#				   seed = 123,
algorithm = algorithm,
n_iterations = n_iterations, n_chains = n_chains,
#					hb_random_parameters = hb_random_parameters,
#	std_errors = "draws", # still need to implement
print_ll = 0,
#mle_tol = 0.0001,
hessian = TRUE,
#	   initial.parameters = initial.parameters,
n_draws = 50,
keep_loglik = 0)
stan_est <- FitMDCEV(psi_formula = ~ b1 + b2 + b3 + b4 + b5 + b6 + b7 + b8-1,
lc_formula = ~ b4 + b5 + b6 + b7 + b8,
data = data,
#				   weights = weights,
model = model,
n_classes = n_classes,
#				   fixed_scale = fixed_scale,
#				   trunc_data = trunc_data,
#				   seed = 123,
algorithm = algorithm,
n_iterations = n_iterations, n_chains = n_chains,
#					hb_random_parameters = hb_random_parameters,
#	std_errors = "draws", # still need to implement
print_ll = 0,
#mle_tol = 0.0001,
hessian = TRUE,
#	   initial.parameters = initial.parameters,
n_draws = 50,
keep_loglik = 0)
stan_est <- FitMDCEV(psi_formula = ~ b1 + b2 + b3 + b4 + b5 + b6 + b7 + b8-1,
lc_formula = ~ b4 + b5 + b6 + b7 + b8,
data = data,
#				   weights = weights,
model = model,
n_classes = n_classes,
fixed_scale = fixed_scale,
#				   trunc_data = trunc_data,
#				   seed = 123,
algorithm = algorithm,
n_iterations = n_iterations, n_chains = n_chains,
#					hb_random_parameters = hb_random_parameters,
#	std_errors = "draws", # still need to implement
print_ll = 0,
#mle_tol = 0.0001,
hessian = TRUE,
#	   initial.parameters = initial.parameters,
n_draws = 50,
keep_loglik = 0)
stan_est <- FitMDCEV(psi_formula = ~ b1 + b2 + b3 + b4 + b5 + b6 + b7 + b8-1,
lc_formula = ~ b4 + b5 + b6 + b7 + b8,
data = data,
#				   weights = weights,
model = model,
n_classes = n_classes,
fixed_scale = fixed_scale,
trunc_data = trunc_data,
#				   seed = 123,
algorithm = algorithm,
n_iterations = n_iterations, n_chains = n_chains,
#					hb_random_parameters = hb_random_parameters,
#	std_errors = "draws", # still need to implement
print_ll = 0,
#mle_tol = 0.0001,
hessian = TRUE,
#	   initial.parameters = initial.parameters,
n_draws = 50,
keep_loglik = 0)
library(rmdcev)
library(pacman)
p_load(tidyverse, rmdcev)
model <- "gamma"
sim.data <- SimulateMdcevData(model = model, nobs = 1000, ngoods = 10)
stan_est <- FitMDCEV(psi_formula = ~ b1 + b2 + b3 + b4 + b5 + b6 + b7 + b8-1,
data = sim.data$data,
model = model,
algorithm = "MLE")
parms_true <- tbl_df(sim.data$parms_true) %>%
mutate(true = as.numeric(true))
coefs <- stan_est$est_pars %>%
mutate(parms = gsub("\\[|\\]", "", parms)) %>%
group_by(parms) %>%
summarise(mean = mean(value),
sd = sd(value),
zstat = mean / sd,
cl_lo = quantile(value, 0.025),
cl_hi = quantile(value, 0.975)) %>%
left_join(parms_true, by = "parms") %>%
print(n=200)
coefs %>%
ggplot(aes(y = mean, x = parms_true))  +
geom_point(size=2) +
geom_text(label=coefs$parms) +
geom_abline(slope = 1) +
geom_errorbar(aes(ymin=cl_lo,ymax=cl_hi,width=0.2))
coefs %>%
ggplot(aes(y = mean, x = true))  +
geom_point(size=2) +
geom_text(label=coefs$parms) +
geom_abline(slope = 1) +
geom_errorbar(aes(ymin=cl_lo,ymax=cl_hi,width=0.2))
###########################################################################
# Create policy scenarios (can affect price only at this point)
###########################################################################
npols <- 2 # Choose number of policies
policies<-	CreateBlankPolicies(npols, stan_est$stan_data[["J"]], stan_est$stan_data[["dat_psi"]])
df_wtp <- PrepareSimulationData(stan_est, policies)
wtp <- SimulateWTP(df_wtp)
SummaryWelfare(wtp)
df_wtp <- PrepareSimulationData(stan_est, policies, nsims = 10)
wtp <- SimulateWTP(df_wtp, nerrs = 10)
SummaryWelfare(wtp)
df_wtp <- PrepareSimulationData(stan_est, policies, nsims = 10)
wtp <- SimulateWTP(df_wtp, nerrs = 10)
SummaryWelfare(wtp)
